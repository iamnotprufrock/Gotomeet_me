par.xlab.text <- within(par.xlab.text,{
cex <-1.5
})
par.ylab.text <- within(par.ylab.text,{
cex <-1.5
})
#add.text <- within(add.text,{
#cex <-1.25
#})
superpose.line <-within(superpose.line, {
col <- c('#00526D','#AD3333')
lwd <-3
})
})
#Compute upper and lower limits of the y axes
max.val <-max(my.data$Corporation.Income.Taxes, my.data$Individual.Income.Taxes)
ylim <- c(0 -0.05*max.val, max.val*1.15)
#Prepare a legend
key <- within(list(),{
text <- c('Individuals',"Corporations")
corner <- c(0.05,.95)
lines <- TRUE
points = FALSE
})
#Update graph object
graph <- update(graph,
xlab = 'Fiscal year', ylab ='Income taxes (% of GDP)',
ylim = ylim,
par.settings = my.theme,
auto.key = key)
#Print graph object
print(graph)
my.theme <- within(trellis.par.get(), {
plot.line<-within(plot.line,{
lwd <-3
})
axis.text <- within(axis.text,{
cex <- 1.25
})
par.xlab.text <- within(par.xlab.text,{
cex <-1.5
})
par.ylab.text <- within(par.ylab.text,{
cex <-1.5
})
add.text <- within(add.text,{
cex <-1.25
})
superpose.line <-within(superpose.line, {
col <- c('#00526D','#AD3333')
lwd <-3
})
})
#Compute upper and lower limits of the y axes
max.val <-max(my.data$Corporation.Income.Taxes, my.data$Individual.Income.Taxes)
ylim <- c(0 -0.05*max.val, max.val*1.15)
#Prepare a legend
key <- within(list(),{
text <- c('Individuals',"Corporations")
corner <- c(0.05,.95)
lines <- TRUE
points = FALSE
})
#Update graph object
graph <- update(graph,
xlab = 'Fiscal year', ylab ='Income taxes (% of GDP)',
ylim = ylim,
par.settings = my.theme,
auto.key = key)
#Print graph object
print(graph)
model.ind <-lm(Individual.Income.Taxes ~Fiscal.Year, data = my.data)
model.corp <-lm(Corporation.Income.Taxes ~Fiscal.Year, data = my.data)
summary(model.ind)
summary(model.corp)
install.packages("survival")
lib('survival')
library('survival')
library(survival)
?survival
??survival
?lm()
install.packages('ctv')
library('ctv')
install.views('TimeSeries')
dive = function(numerator,denominator){numerator/denominator}
divide(0.2,1)
dive(0.2,1)
identical()
?identical()
identical(0,null)
identical(0,0)
?all.equal()
all.equal(3,3)
class([1,2])
class((1,2))
class(c(1,2))
1+'operator'
c(1,'operator')
class(c(1,'operator'))
str(c(1,'operator'))
c(1,2)
c(1,2)[[2]]
c(1,2)[2]
print(c(1,2))
c(1,2)
uciCar = read.table('car.data.csv')
uciCar = read.table('car\.data\.csv')
uciCar = read.table('car\\.data\\.csv')
uciCar = read.table('car_data.csv')
uciCar = read.table('car_data.csv',sep=',',header=T)
View(uciCar)
uciCar = read.table('http://www.win-vector.com/dfiles/car.data.csv',sep=',',header=T)
View(uciCar)
class(uciCar)
help('data.frame')
summary(uciCar)
dim(uciCar)
install.packages("sqldf")
install.packages("xlsx")
install.packages("jsonlite")
install.packages("XML")
library(RJDBC)
drv <- JDBC("com.mysql.jdbc.Driver",
"/users/iamnotprufrock1/mysql-connector-java-5.1.34-bin.jar",
identifier.quote="`")
conn = dbConnect(drv, 'oidvip.ops.expertcity.com','colbiapp','colbiapp')
conn = dbConnect(drv, 'jdbc:mysql://oidvip.ops.expertcity.com','colbiapp','colbiapp')
conn = dbConnect(drv, 'jdbc:mysql://oidvip.ops.expertcity.com','colbiapp','colbiapp')
conn = dbConnect(drv, 'jdbc:mysql://smdb1.ops.expertcity.com','smapp','smapp')
USER <- colbiapp
USER <- colbiapp
PASSWORD <- colbiapp
"library(ROracle)drv <- dbDriver("Oracle")con <- dbConnect(drv, USER, PASSWORD,    "(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)
(HOST=oidvip.ops.expertcity.com)(PORT=1521)))
(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=bi)))")test <- dbGetQuery(con, "SELECT * FROM SFREP.account WHERE rownum<=10")
USER <- colbiapp
PASSWORD <- colbiapp
"library(ROracle)drv <- dbDriver("Oracle")con <- dbConnect(drv, USER, PASSWORD,    "(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)
(HOST=oidvip.ops.expertcity.com)(PORT=1521)))
(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=bi)))")test <- dbGetQuery(con, "SELECT * FROM SFREP.account WHERE rownum<=10")
USER <- colbiapp
PASSWORD <- colbiapp
"library(ROracle)drv <- dbDriver("Oracle")con <- dbConnect(drv, USER, PASSWORD,    "(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)
(HOST=oidvip.ops.expertcity.com)(PORT=1521)))
(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=bi)))")test <- dbGetQuery(con, "SELECT * FROM SFREP.account WHERE rownum<=10")
USER <- colbiapp
PASSWORD <- colbiapp
"library(ROracle)drv <- dbDriver("Oracle")con <- dbConnect(drv, USER, PASSWORD,    "(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)
(HOST=oidvip.ops.expertcity.com)(PORT=1521)))
(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=bi)))")test <- dbGetQuery(con, "SELECT * FROM SFREP.account WHERE rownum<=10")
USER <- colbiapp
PASSWORD <- colbiapp
"library(ROracle)drv <- dbDriver("Oracle")con <- dbConnect(drv, USER, PASSWORD,    "(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)
(HOST=oidvip.ops.expertcity.com)(PORT=1521)))
(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=bi)))")test <- dbGetQuery(con, "SELECT * FROM SFREP.account WHERE rownum<=10")
USER <- colbiapp
PASSWORD <- colbiapp"library(ROracle)drv <- dbDriver("Oracle")con <- dbConnect(drv, USER, PASSWORD,    "(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)
(HOST=oidvip.ops.expertcity.com)(PORT=1521)))
(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=bi)))")test <- dbGetQuery(con, "SELECT * FROM SFREP.account WHERE rownum<=10")
USER <- colbiapp
USER = 'colbiapp'
PASSWORD <- 'colbiapp' "library(ROracle)drv <- dbDriver("Oracle")con <- dbConnect(drv, USER, PASSWORD,    "(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)
(HOST=oidvip.ops.expertcity.com)(PORT=1521)))
(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=bi)))")test <- dbGetQuery(con, "SELECT * FROM SFREP.account WHERE rownum<=10")
USER = 'colbiapp'
USER = 'colbiapp'
library(ROracle)
PASSWORD <- 'colbiapp'
library(ROracle)
library("Rcpp", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=bi)))")test <- dbGetQuery(con, "SELECT * FROM SFREP.account WHERE rownum<=10")>"library(ROracle)drv <- dbDriver("Oracle")con <- dbConnect(drv, USER, PASSWORD,    "(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)
install.packages("Rcpp", type = "source")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
devtools::has_devel()
library(Rcpp)
cppFunction('
int one() {
return 1;
}
')
one()
devtools::install_github("dplyr")
vec = c(2,3)
vec[[2]]
print(vec)
print(class(vec))
class(vec)
str(vec)
x = list('a'=6,b='fred')
names(x)
x$a
x$b
?getRversion
?getRversion
R.Version()
library(ROracle)
library(ROracle)
d
f
R.Version()
library(ROracle)
library(ROracle)
library(ROracle)
library(ROracle)
USER <- 'colbiapp'
PASSWORD <- 'colbiapp'"library(ROracle)drv <- dbDriver("Oracle")con <- dbConnect(drv, USER, PASSWORD,    "(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)
(HOST=oidvip.ops.expertcity.com)(PORT=1521)))
(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=bi)))")test <- dbGetQuery(con, "SELECT * FROM SFREP.account WHERE rownum<=10")
PASSWORD <- 'colbiapp'
drv <- dbDriver("Oracle")
con <- dbConnect(drv,USER,PASSWORD,'oidvip.ops.expertcity.com/bi')
USER <- 'smdb1'
USER <- 'smapp'
PASSWORD <- 'smapp'
drv <- dbDriver("Oracle")
con <- dbConnect(drv,USER,PASSWORD,'smdb1.ops.expertcity.com','1521')
con <- dbConnect(drv,USER,PASSWORD,'smdb1.ops.expertcity.com')
USER <- 'colbiapp'
PASSWORD <- 'colbiapp'
drv <- dbDriver("Oracle")
con <- dbConnect(drv, USER, PASSWORD,    "(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)
(HOST=oidvip.ops.expertcity.com)(PORT=1521)))
(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=bi)))")test <- dbGetQuery(con, "SELECT * FROM SFREP.account WHERE rownum<=10")
con <- dbConnect(drv, USER, PASSWORD,    "(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)
(HOST=oidvip.ops.expertcity.com)(PORT=1521)))
(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=bi)))")
USER <- 'smapp'
PASSWORD <- 'smapp'
drv <- dbDriver("Oracle")
con <- dbConnect(drv, USER, PASSWORD,    "(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)
(HOST=smdb1.ops.expertcity.com)(PORT=1521)))
(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=bi)))")
con <- dbConnect(drv, USER, PASSWORD,    "(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)
(HOST=smdb1.ops.expertcity.com)(PORT=1521)))
(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=smdb1)))")
test <- dbGetQuery(con, "SELECT * FROM SFREP.account WHERE rownum<=10")
test
USER <- 'colbiapp'
PASSWORD <- 'colbiapp'
con <- dbConnect(drv, USER, PASSWORD,    "(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)
(HOST=oidvip.ops.expertcity.com)(PORT=1521)))
(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=bi)))")
USER <- 'smapp'
PASSWORD <- 'smapp'
drv <- dbDriver("Oracle")
con <- dbConnect(drv, USER, PASSWORD,    "(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)
(HOST=smdb1.ops.expertcity.com)(PORT=1521)))
(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=smdb1)))")
USER <- 'smapp'
PASSWORD <- 'smapp'
drv <- dbDriver("Oracle")
con <- dbConnect(drv, USER, PASSWORD,    "(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)
(HOST=smdb1.ops.expertcity.com)(PORT=1521)))
(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=smdb1)))")
# Some general questions: Have we been losing customers because they were not directed to the right product?
#                         how fast are we losing long time customers? a.k.a customers who had the longest Days of Continuous Service? Does it correspond to web redisign/tests we are doing?
#                         how many accounts had more than 1 G2M Trials? Whay would they have multiple trials? Does multiple trialers have a higher conversion rate than single trialer?
#------------deep dive into g2mwt_soa_lapsed--------------
# Q1: last use date and last plan start date, is last use date always within last plan?
# Q2: meetings/webinars had in the last plan, look at meetings/webinars had in the last 30 days for monthly plan;
# Q3: how many of them had 1 trial and dropped? how many of them didn't get sales rep assistance?
# Q5: how many of them started off with A trial but ended up buying B? how many of them had B trial afterwards? how many of them had assistance from sales rep?
# Q6: find out % of 3001-4000 continuous service days, 2001-3000, 1001-2000, 501-1000, 101-500, 61-100, 31-60, 1-30
# Q7: watch 3 metrics: a.) first paid date to first trial end date(how close are they?) b.) trial product type to paid product type c.) first trial product type to ending product type
# Q: break out annual and monthly plans
# Q: break out direct buys and trial conversions
retained_2014 <- dbGetQuery(con, "select TO_CHAR(accountkey), DOMAIN,country, service,
DAYSCONTINUOUSSERVICE,FIRSTREGISTRATIONDATE, LASTREGISTRATIONDATE,G2M_FIRSTTRIALSTARTDATE, G2M_FIRSTTRIALENDDATE, G2M_LASTTRIALSTARTDATE, G2M_LASTTRIALENDDATE,
g2w_firsttrialstartdate, G2W_FIRSTTRIALENDDATE, firstpaidplanstartdate, g2m_firstuse, g2m_lastuse,g2w_firstuse, g2w_lastuse,firstuse,lastuse,
lastplanstartdate, lastplanenddate, g2waddontrialstartdate, g2waddontrialenddate, G2M_currentPRICECENTS, G2W_CURRENTPRICECENTS, billingcycle,WEBINARS_LIFETIME, MEETINGS_LIFETIME,
EVERG2M, EVERG2W, FIRSTREGISTRATIONCHANNEL,LASTPROMOTION,LASTPLANCHANNEL from g2mwt_soa_current
where FIRSTPAIDPLANSTARTDATE between to_date('20140101','YYYYMMDD') AND to_date('20141231', 'YYYYMMDD')
order by DAYSCONTINUOUSSERVICE DESC")
retained_2014$time_firstpaid_firsttrial = as.integer(ifelse(is.na(retained_2014$G2M_FIRSTTRIALSTARTDATE)==FALSE,(retained_2014$FIRSTPAIDPLAN-retained_2014$G2M_FIRSTTRIALSTARTDATE)/(60*24*60),(retained_2014$FIRSTPAIDPLAN-retained_2014$G2W_FIRSTTRIALSTARTDATE)/(60*24*60)))
View(retained_2014)
directbuy_2014_retained = subset(retained_2014,is.na(time_firstpaid_firsttrial)==TRUE)
trial_2014_retained = subset(retained_2014,is.na(time_firstpaid_firsttrial)==FALSE)
directbuy_to_trial=dim(directbuy_2014_retained)[1]/(dim(retained_2014)[1]-dim(directbuy_2014_retained)[1])#Q9
df_time_firstpaid_firsttrial = data.frame(trial_2014_retained$time_firstpaid_firsttrial)
summary(df_time_firstpaid_firsttrial)
firstpaid_firsttrial_Distribution = as.data.frame(table(cut(retained_2014$time_firstpaid_firsttrial,breaks=seq(-247,3831,by=5))))
firstpaid_firsttrial_Distribution$percent = round(firstpaid_firsttrial_Distribution$Freq/sum(firstpaid_firsttrial_Distribution$Freq),4)
firstpaid_firsttrial_Distribution = arrange(firstpaid_firsttrial_Distribution,desc(firstpaid_firsttrial_Distribution$percent))
library(ROracle)
library(ggplot2)
library(plyr)
firstpaid_firsttrial_Distribution = arrange(firstpaid_firsttrial_Distribution,desc(firstpaid_firsttrial_Distribution$percent))
View(firstpaid_firsttrial_Distribution)
all_2014 <- dbGetQuery(con, "select accountkey, DOMAIN,country, service,
DAYSCONTINUOUSSERVICE,FIRSTREGISTRATIONDATE, LASTREGISTRATIONDATE,G2M_FIRSTTRIALSTARTDATE, G2M_FIRSTTRIALENDDATE, G2M_LASTTRIALSTARTDATE, G2M_LASTTRIALENDDATE,MEETINGS_LAST_90,
g2w_firsttrialstartdate, G2W_FIRSTTRIALENDDATE, firstpaidplanstartdate, g2m_firstuse, g2m_lastuse,g2w_firstuse, g2w_lastuse,firstuse,lastuse,
lastplanstartdate, lastplanenddate, g2waddontrialstartdate, g2waddontrialenddate, G2M_currentPRICECENTS, G2W_CURRENTPRICECENTS, billingcycle,WEBINARS_LIFETIME, MEETINGS_LIFETIME,
EVERG2M, EVERG2W, FIRSTREGISTRATIONCHANNEL,LASTPROMOTION,LASTPLANCHANNEL, STATUS from
(select accountkey, DOMAIN,country, service,
DAYSCONTINUOUSSERVICE,FIRSTREGISTRATIONDATE, LASTREGISTRATIONDATE,G2M_FIRSTTRIALSTARTDATE, G2M_FIRSTTRIALENDDATE, G2M_LASTTRIALSTARTDATE, G2M_LASTTRIALENDDATE, MEETINGS_LAST_90,
g2w_firsttrialstartdate, G2W_FIRSTTRIALENDDATE, firstpaidplanstartdate, g2m_firstuse, g2m_lastuse,g2w_firstuse, g2w_lastuse,firstuse,lastuse,
lastplanstartdate, lastplanenddate, g2waddontrialstartdate, g2waddontrialenddate, G2M_currentPRICECENTS, G2W_CURRENTPRICECENTS, billingcycle,WEBINARS_LIFETIME, MEETINGS_LIFETIME,
EVERG2M, EVERG2W, FIRSTREGISTRATIONCHANNEL,LASTPROMOTION,LASTPLANCHANNEL, 'current' as status from g2mwt_soa_current union
select accountkey, DOMAIN,country, service,
DAYSCONTINUOUSSERVICE,FIRSTREGISTRATIONDATE, LASTREGISTRATIONDATE,G2M_FIRSTTRIALSTARTDATE, G2M_FIRSTTRIALENDDATE, G2M_LASTTRIALSTARTDATE, G2M_LASTTRIALENDDATE,MEETINGS_LAST_90,
g2w_firsttrialstartdate, G2W_FIRSTTRIALENDDATE, firstpaidplanstartdate, g2m_firstuse, g2m_lastuse,g2w_firstuse, g2w_lastuse,firstuse,lastuse,
lastplanstartdate, lastplanenddate, g2waddontrialstartdate, g2waddontrialenddate, G2M_lastPRICECENTS, G2W_lastPRICECENTS, billingcycle,WEBINARS_LIFETIME, MEETINGS_LIFETIME,
EVERG2M, EVERG2W, FIRSTREGISTRATIONCHANNEL,LASTPROMOTION,LASTPLANCHANNEL, 'lapsed' as status from g2mwt_soa_lapsed
)
where FIRSTPAIDPLANSTARTDATE between to_date('20140101','YYYYMMDD') AND to_date('20141231', 'YYYYMMDD')
order by DAYSCONTINUOUSSERVICE DESC")
all_2014$time_firstpaid_firsttrial = as.integer(ifelse(is.na(all_2014$G2M_FIRSTTRIALSTARTDATE)==FALSE,(all_2014$FIRSTPAIDPLAN-all_2014$G2M_FIRSTTRIALSTARTDATE)/(60*24*60),(all_2014$FIRSTPAIDPLAN-all_2014$G2W_FIRSTTRIALSTARTDATE)/(60*24*60)))
trial_2014_all = subset(all_2014,is.na(time_firstpaid_firsttrial)==FALSE)
df_all_firstpaid_firsttrial = data.frame(trial_2014_all$time_firstpaid_firsttrial)
summary(df_all_firstpaid_firsttrial)
firstpaid_firsttrial_all_Distribution = as.data.frame(table(cut(trial_2014_all$time_firstpaid_firsttrial,breaks=seq(-340,3831,by=5))))
firstpaid_firsttrial_all_Distribution$percent = round(firstpaid_firsttrial_all_Distribution$Freq/sum(firstpaid_firsttrial_all_Distribution$Freq),4)
firstpaid_firsttrial_all_Distribution = arrange(firstpaid_firsttrial_all_Distribution,desc(firstpaid_firsttrial_all_Distribution$percent))
View(firstpaid_firsttrial_Distribution)
View(firstpaid_firsttrial_all_Distribution)
current = subset(effective,STATUS=='current')
current = subset(effective,STATUS=='current')
current_percent = dim(current)[1]/dim(effective)[1]
current = subset(effective,STATUS=='current')
effective = subset(trial_2014_all,time_firstpaid_firsttrial > 28 & time_firstpaid_firsttrial<=33)
current = subset(effective,STATUS=='current')
current_percent = dim(current)[1]/dim(effective)[1]
trial_2014_all_G2MTrial = subset(trial_2014_all,is.na(G2M_FIRSTTRIALSTARTDATE)==FALSE)
trial_2014_all_G2MService = subset(trial_2014_all_G2MTrial, SERVICE=='GTM')
dim(trial_2014_all_G2MService)[1]/dim(trial_2014_all_G2MTrial)[1]
trial_2014_all_G2MService_retained = subset(trial_2014_all_G2MService, STATUS=='current')
dim(trial_2014_all_G2MService_retained)[1]/dim(trial_2014_all_G2MService)[1]
direct_2014_all = subset(all_2014,is.na(G2M_FIRSTTRIALSTARTDATE)==TRUE & is.na(G2W_FIRSTTRIALSTARTDATE)==TRUE & is.na(FIRSTPAIDPLANSTARTDATE)==FALSE)
direct_2014_retained = subset(direct_2014_all,STATUS=='current')
dim(direct_2014_retained)[1]/dim(direct_2014_all)[1]
all_2014$FIRSTREGISTRATIONCHANNEL = tolower(all_2014$FIRSTREGISTRATIONCHANNEL)
all_2014$LASTPLANCHANNEL = tolower(all_2014$LASTPLANCHANNEL)
source_2014=arrange(count(all_2014,c('FIRSTREGISTRATIONCHANNEL', 'LASTPLANCHANNEL','STATUS')),desc(FIRSTREGISTRATIONCHANNEL))
source_2014_retained = arrange(subset(source_2014,STATUS=='current'),desc(freq))
source_2014_lapsed = arrange(subset(source_2014,STATUS=='lapsed'),desc(freq))
source_2014_sub = rbind(source_2014_retained,source_2014_lapsed)
source_2014_sub$key = paste(source_2014_sub$FIRSTREGISTRATIONCHANNEL,source_2014_sub$LASTPLANCHANNEL)
source_2014_temp = aggregate(freq~key,data=source_2014_sub,FUN=sum)
source_2014_combine = merge(source_2014_sub,source_2014_temp,by='key',suffixes=c('.x','.all'))
source_2014_combine$retension_rate = round(source_2014_combine$freq.x/source_2014_combine$freq.all,2)
source_2014_final = arrange(source_2014_combine[source_2014_combine$STATUS=='current',c(2,3,6,7)],desc(freq.all))
sum(source_2014_final$freq.all)
source_2014_final$percent = round(source_2014_final$freq.all/sum(source_2014_final$freq.all),2)
View(source_2014_final)
annual_all=subset(all_2014,BILLINGCYCLE=='y')
annual_retained = subset(annual_all, STATUS=='current')
monthly_all=subset(all_2014,BILLINGCYCLE=='m')
monthly_retained = subset(monthly_all, STATUS=='current')
dim(annual_all)[1]/dim(all_2014)[1]
dim(annual_retained)[1]/dim(annual_all)[1]
dim(monthly_all)[1]/dim(all_2014)[1]
dim(monthly_retained)[1]/dim(monthly_all)[1]
G2M_2014 = subset(all_2014,EVERG2M!='F')
G2M_2014$Avg_Meetings = round(G2M_2014$MEETINGS_LIFETIME/G2M_2014$DAYSCONTINUOUSSERVICE,4)
G2M_2014$Avg_Meetings[is.na(G2M_2014$Avg_Meetings)] <- 0
View(`G2M_2014`)
G2M_Distribution = as.data.frame(table(cut(G2M_2014$Avg_Meetings,breaks=seq(0,230,by=1))))
G2M_Distribution$percent = round(G2M_Distribution$Freq/sum(G2M_Distribution$Freq),4)
G2W_2014 = subset(all_2014,EVERG2W!='F')
G2W_2014$Avg_Webinars = round(G2W_2014$WEBINARS_LIFETIME/G2W_2014$DAYSCONTINUOUSSERVICE, 4)
G2W_2014$Avg_Webinars[is.na(G2W_2014$Avg_Webinars)] <- 0
G2W_Distribution = as.data.frame(table(cut(G2W_2014$Avg_Webinars,breaks=seq(0,30,by=1))))
G2W_Distribution$percent = round(G2W_Distribution$Freq/sum(G2W_Distribution$Freq),4)
View(`G2M_Distribution`)
View(`G2W_Distribution`)
library(ROracle)
#---------pull in DB data----------#
USER <- 'smapp'
PASSWORD <- 'smapp'
drv <- dbDriver("Oracle")
con <- dbConnect(drv, USER, PASSWORD,    "(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)
(HOST=smdb1.ops.expertcity.com)(PORT=1521)))
(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=smdb1)))")
Feb02_a <- dbGetQuery(con, "select accountkey, g2m_firsttrialstartdate, firstpaidplanstartdate, LASTPLANCHANNEL from
(
select accountkey, country, service, LASTPLANCHANNEL,g2m_firsttrialstartdate, firstpaidplanstartdate, g2m_firstuse, g2m_currentpricecents, billingcycle, billingcycleunit, 'Current' as status from g2mwt_soa_current union
select accountkey, country, service, LASTPLANCHANNEL,g2m_firsttrialstartdate, firstpaidplanstartdate, g2m_firstuse, g2m_lastpricecents, billingcycle, billingcycleunit, 'Lapsed' as status from g2mwt_soa_lapsed
)
where g2m_firsttrialstartdate like to_date('20150202', 'YYYYMMDD') and firstpaidplanstartdate <= g2m_firsttrialstartdate+31 and firstpaidplanstartdate >= g2m_firsttrialstartdate
order by Firstpaidplanstartdate")
Feb02_b <- dbGetQuery(con, "select accountkey, g2m_firsttrialstartdate, firstpaidplanstartdate, LASTPLANCHANNEL from
(
select accountkey, country, service, LASTPLANCHANNEL,g2m_firsttrialstartdate, firstpaidplanstartdate, g2m_firstuse, g2m_currentpricecents, billingcycle, billingcycleunit, 'Current' as status from g2mwt_soa_current union
select accountkey, country, service, LASTPLANCHANNEL,g2m_firsttrialstartdate, firstpaidplanstartdate, g2m_firstuse, g2m_lastpricecents, billingcycle, billingcycleunit, 'Lapsed' as status from g2mwt_soa_lapsed
)
where g2m_firsttrialstartdate like to_date('20150202', 'YYYYMMDD') and firstpaidplanstartdate <=to_date('20150305', 'YYYYMMDD') and firstpaidplanstartdate >= g2m_firsttrialstartdate
order by Firstpaidplanstartdate")
Feb02_a <- dbGetQuery(con, "select accountkey, g2m_firsttrialstartdate, firstpaidplanstartdate, LASTPLANCHANNEL from
(
select accountkey, country, service, LASTPLANCHANNEL,g2m_firsttrialstartdate, firstpaidplanstartdate, g2m_firstuse, g2m_currentpricecents, billingcycle, billingcycleunit, 'Current' as status from g2mwt_soa_current union
select accountkey, country, service, LASTPLANCHANNEL,g2m_firsttrialstartdate, firstpaidplanstartdate, g2m_firstuse, g2m_lastpricecents, billingcycle, billingcycleunit, 'Lapsed' as status from g2mwt_soa_lapsed
)
where g2m_firsttrialstartdate like to_date('20150202', 'YYYYMMDD') and firstpaidplanstartdate <= g2m_firsttrialstartdate+31 and firstpaidplanstartdate >= g2m_firsttrialstartdate and firstpaidplanstartdate >= g2m_firsttrialstartdate
order by Firstpaidplanstartdate")
View(Feb02_a)
c = merge(Feb02_a, Feb02_b, by=ACCOUNTKEY)
c = merge(Feb02_a, Feb02_b, by='ACCOUNTKEY')
x <- rbind(Feb02_a, Feb02_b)
x[! duplicated(x, fromLast=TRUE) & seq(nrow(x)) <= nrow(Feb02_a), ]
x[! duplicated(x, fromLast=TRUE) & seq(nrow(x)) <= nrow(Feb02_b), ]
Feb02_a <- dbGetQuery(con, "select accountkey, g2m_firsttrialstartdate, firstpaidplanstartdate  from
(
select accountkey, country, service, LASTPLANCHANNEL,g2m_firsttrialstartdate, firstpaidplanstartdate, g2m_firstuse, g2m_currentpricecents, billingcycle, billingcycleunit, 'Current' as status from g2mwt_soa_current union
select accountkey, country, service, LASTPLANCHANNEL,g2m_firsttrialstartdate, firstpaidplanstartdate, g2m_firstuse, g2m_lastpricecents, billingcycle, billingcycleunit, 'Lapsed' as status from g2mwt_soa_lapsed
)
where trunc(g2m_firsttrialstartdate,'dd') = to_date('20150202', 'YYYYMMDD') and firstpaidplanstartdate <=g2m_firsttrialstartdate+31  and firstpaidplanstartdate >= g2m_firsttrialstartdate
order by Firstpaidplanstartdate desc")
Feb02_b <- dbGetQuery(con, "select accountkey, g2m_firsttrialstartdate, firstpaidplanstartdate  from
(
select accountkey, country, service, LASTPLANCHANNEL,g2m_firsttrialstartdate, firstpaidplanstartdate, g2m_firstuse, g2m_currentpricecents, billingcycle, billingcycleunit, 'Current' as status from g2mwt_soa_current union
select accountkey, country, service, LASTPLANCHANNEL,g2m_firsttrialstartdate, firstpaidplanstartdate, g2m_firstuse, g2m_lastpricecents, billingcycle, billingcycleunit, 'Lapsed' as status from g2mwt_soa_lapsed
)
where trunc(g2m_firsttrialstartdate,'dd') = to_date('20150202', 'YYYYMMDD') and trunc(firstpaidplanstartdate,'dd') <=to_date('20150305','YYYYMMDD')  and firstpaidplanstartdate >= g2m_firsttrialstartdate
order by Firstpaidplanstartdate desc")
x <- rbind(Feb02_a, Feb02_b)
x[! duplicated(x, fromLast=TRUE) & seq(nrow(x)) <= nrow(Feb02_b), ]
library(ROracle)
#---------pull in DB data----------#
USER <- 'smapp'
PASSWORD <- 'smapp'
drv <- dbDriver("Oracle")
con <- dbConnect(drv, USER, PASSWORD,    "(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)
(HOST=smdb1.ops.expertcity.com)(PORT=1521)))
(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=smdb1)))")
allbeforetrials <- dbGetQuery(con, "select accountkey, g2m_firsttrialstartdate, firstpaidplanstartdate  from
(
select accountkey, country, service, LASTPLANCHANNEL,g2m_firsttrialstartdate, firstpaidplanstartdate, g2m_firstuse, g2m_currentpricecents, billingcycle, billingcycleunit, 'Current' as status from g2mwt_soa_current union
select accountkey, country, service, LASTPLANCHANNEL,g2m_firsttrialstartdate, firstpaidplanstartdate, g2m_firstuse, g2m_lastpricecents, billingcycle, billingcycleunit, 'Lapsed' as status from g2mwt_soa_lapsed
)
where (g2m_firsttrialstartdate between to_date('20150128', 'YYYYMMDD') and to_date('20150203','YYYYMMDD'))
order by Firstpaidplanstartdate desc")
allbeforebuys <- dbGetQuery(con, "select accountkey, g2m_firsttrialstartdate, firstpaidplanstartdate  from
(
select accountkey, country, service, LASTPLANCHANNEL,g2m_firsttrialstartdate, firstpaidplanstartdate, g2m_firstuse, g2m_currentpricecents, billingcycle, billingcycleunit, 'Current' as status from g2mwt_soa_current union
select accountkey, country, service, LASTPLANCHANNEL,g2m_firsttrialstartdate, firstpaidplanstartdate, g2m_firstuse, g2m_lastpricecents, billingcycle, billingcycleunit, 'Lapsed' as status from g2mwt_soa_lapsed
)
where (g2m_firsttrialstartdate between to_date('20150128', 'YYYYMMDD') and to_date('20150203','YYYYMMDD'))
and firstpaidplanstartdate <= g2m_firsttrialstartdate+31
order by Firstpaidplanstartdate desc")
getwd()
webbeforetrials = read.csv('beforeaccountid_g2m.csv',header=T,sep=',')
View(webbeforetrials)
webbeforetrials = read.table('before_g2m_webtrials.xlsx',header=T,sep=',')
View(webbeforetrials)
webbeforetrials = read.csv('before_g2m_webtrials.xlsx',header=T,sep=',',skip=5)
webbeforetrials = read.csv('before_g2m_webtrials.xlsx',header=T,sep=',')
webbeforetrials = read.table('before_g2m_webtrials.xlsx',header=T,sep=',')
webbeforetrials = read.table('before_g2m_webtrials.csv',header=T,sep=',')
webbeforetrials = read.table('before_g2m_webtrials.csv',header=T,sep=',')
webbeforetrials = read.table('before_g2m_webtrials.csv',header=TRUE,sep=',')
webbeforetrials = read.csv('before_g2m_webtrials.csv',header=TRUE,sep=',')
webbeforetrials = read.csv('before_g2m_webtrials.csv',header=TRUE,sep=',')
webbeforetrials = read.csv('before_g2m_webtrials.csv',header=TRUE,sep=',')
View(webbeforetrials)
webbeforetrials = read.table('before_g2m_web_trials.xlsx',header=TRUE,sep=',')
View(webbeforetrials)
webbeforetrials = read.table('before_g2m_web_trials.xlsx',header=TRUE,sep=',')
webbeforetrials = read.table('before_g2m_web_trials.csv',header=TRUE,sep=',')
webbeforetrials = read.csv('before_g2m_web_trials.csv',header=TRUE,sep=',')
library(ROracle)
#---------pull in DB data----------#
USER <- 'smapp'
PASSWORD <- 'smapp'
drv <- dbDriver("Oracle")
con <- dbConnect(drv, USER, PASSWORD,    "(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)
(HOST=smdb1.ops.expertcity.com)(PORT=1521)))
(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=smdb1)))")
allbeforetrials <- dbGetQuery(con, "select TO_CHAR(accountkey), g2m_firsttrialstartdate, firstpaidplanstartdate  from
(
select accountkey, country, service, LASTPLANCHANNEL,g2m_firsttrialstartdate, firstpaidplanstartdate, g2m_firstuse, g2m_currentpricecents, billingcycle, billingcycleunit, 'Current' as status from g2mwt_soa_current union
select accountkey, country, service, LASTPLANCHANNEL,g2m_firsttrialstartdate, firstpaidplanstartdate, g2m_firstuse, g2m_lastpricecents, billingcycle, billingcycleunit, 'Lapsed' as status from g2mwt_soa_lapsed
)
where (g2m_firsttrialstartdate between to_date('20150128', 'YYYYMMDD') and to_date('20150203','YYYYMMDD'))
order by Firstpaidplanstartdate desc")
allbeforebuys <- dbGetQuery(con, "select TO_CHAR(accountkey), g2m_firsttrialstartdate, firstpaidplanstartdate  from
(
select accountkey, country, service, LASTPLANCHANNEL,g2m_firsttrialstartdate, firstpaidplanstartdate, g2m_firstuse, g2m_currentpricecents, billingcycle, billingcycleunit, 'Current' as status from g2mwt_soa_current union
select accountkey, country, service, LASTPLANCHANNEL,g2m_firsttrialstartdate, firstpaidplanstartdate, g2m_firstuse, g2m_lastpricecents, billingcycle, billingcycleunit, 'Lapsed' as status from g2mwt_soa_lapsed
)
where (g2m_firsttrialstartdate between to_date('20150128', 'YYYYMMDD') and to_date('20150203','YYYYMMDD'))
and firstpaidplanstartdate <= g2m_firsttrialstartdate+31
order by Firstpaidplanstartdate desc")
webbeforetrials = read.csv('before_g2m_web_trials.csv',header=TRUE,sep=',')
webbeforetrials = read.csv('before_g2m_web_trials.csv',header=TRUE,sep=',',skip=1)
webbeforetrials = read.csv('before_g2m_web_trials.csv',header=TRUE,sep=',',skip=2)
webbeforetrials = read.csv('before_g2m_web_trials.csv',header=TRUE,sep=',')
getwd()
webbeforetrials = read.csv('before_g2m_web_trials.csv',header=TRUE,sep=',')
webbeforetrials = read.csv('before_g2m_web_trials.csv',header=TRUE,sep=',',skip=1)
webbeforetrials_g2w = read.csv('before_g2w_web_trials.csv',header=TRUE,sep=',')
library(plyr)
library(reshape)
library(dplyr)
library(xlsx)
library(ggplot2)
library(ROracle)
library(ggplot2)
library(plyr)
library(stringr)
setwd("/Users/iamnotprufrock1/Downloads/Citrix/Gotomeet_me")
USER <- 'smapp'
PASSWORD <- 'smapp'
drv <- dbDriver("Oracle")
con <- dbConnect(drv,'colbiapp','colbiapp','oidvip.ops.expertcity.com/bi')
df1 <- dbGetQuery(con, "select * from account_provisioning_fact apf
inner join
(select * from colbi.gotomeet_userprofile users
inner join etl_colbi.user_role_bridge urb
on users.userkey = urb.native_account_key) df
on apf.native_broker_acct_key = df.native_account_key")
View(df1)
